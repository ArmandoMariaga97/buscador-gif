{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","category","setCategory","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGif","a","fetch","encodeURI","res","json","data","gifs","map","gif","id","title","url","images","fixed_height_small","console","log","GridGif","useEffect","then","setImages","className","loading","height","src","alt","GifExpertApp","props","gifAppContent","document","getElementById","ReactDOM","render"],"mappings":"uMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAkBA,OACI,sBAAMC,SAXK,SAACC,GAEZA,EAAEC,iBAECJ,EAASK,OAAOC,OAAS,IACxBR,GAAe,SAACS,GAAD,OAAkBP,GAAlB,mBAA+BO,OAC9CN,EAAc,MAKlB,SACI,uBAAQO,KAAK,OAAOC,MAAQT,EAAWU,SAlBxB,SAACP,GAEpBF,EAAaE,EAAEQ,OAAOF,QAgBiDG,YAAY,oB,uBCxB1EC,EAAM,uCAAG,WAAOb,GAAP,qBAAAc,EAAA,sEACMC,MAAM,0CAAD,OAA4CC,UAAWhB,GAAvD,sDADX,cACZiB,EADY,gBAEMA,EAAIC,OAFV,uBAEVC,EAFU,EAEVA,KAGFC,EAAOD,EAAKE,KAAK,SAACC,GACpB,MAAO,CACHC,GAAUD,EAAIC,GACdC,MAAUF,EAAIE,MACdC,IAAUH,EAAII,OAAOC,mBAAmBF,QAIhDG,QAAQC,IAAKV,GAbK,kBAgBZC,GAhBY,4CAAH,sDCCVU,EAAU,SAAC,GAAoB,IAAjB9B,EAAgB,EAAhBA,SAGvB+B,qBAAW,kBAAMlB,EAAQb,GAAWgC,KAAMC,KAAa,IAEvD,MAA4BlC,mBAAS,IAArC,mBAAO2B,EAAP,KAAeO,EAAf,KAEA,OACI,qCACI,qBAAIC,UAAU,wCAAd,cAAyDlC,EAAzD,OAEA,qBAAKkC,UAAU,MAAf,SACMR,EAAOL,KAAK,YAA2B,IAAvBI,EAAsB,EAAtBA,IAAKD,EAAiB,EAAjBA,MAAOD,EAAU,EAAVA,GAE1B,OAAO,qBAAgBW,UAAU,qDAA1B,SACK,sBAAKA,UAAU,2BAAf,UAEI,qBAAKC,QAAQ,OAAOC,OAAO,QAAQC,IAAMZ,EAAMS,UAAU,eAAeI,IAAI,QAC5E,qBAAKJ,UAAU,YAAf,SACI,qBAAIA,UAAU,uBAAd,cAAwCV,EAAxC,aALFD,YCMvBgB,EAnBM,SAAAC,GAEjB,MAAoCzC,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,kDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACES,EAAWc,KAAK,SAAErB,GAAF,OACd,cAAC,EAAD,CAEIA,SAAWA,GADLA,UCVpByC,G,MAAgBC,SAASC,eAAe,WAE9CC,IAASC,OACL,cAAC,EAAD,IACAJ,K","file":"static/js/main.e1012616.chunk.js","sourcesContent":["import React, { useState }  from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [category, setCategory] = useState(''); \r\n\r\n    const handleCategory = (e) => {\r\n\r\n        setCategory( e.target.value );\r\n        \r\n    }\r\n\r\n    const submit = (e) => {\r\n        // evitar que el submit refrezque la pagina\r\n        e.preventDefault();\r\n        // el trim(),nos sirve para quitar los espacios al inicio y final\r\n        if(category.trim().length > 0){\r\n            setCategories( (categories) => [ category, ...categories ] );\r\n            setCategory ( '' );\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={ submit } >\r\n            <input  type=\"text\" value={ category } onChange={ handleCategory } placeholder=\"Buscar GIFs \" />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n    export const getGif = async( category ) => {\r\n        const res       = await fetch(`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=xZxkp6bmYkbX25gtCmmuD58cyFfQhxvo&limit=8`);\r\n        const { data }  = await res.json();\r\n        // de la data estamos tomando solo lo que necesitamos y lo almacenamos en\r\n        // la const gif, que tendra un array de objetos\r\n        const gifs = data.map( (gif) => {\r\n            return {\r\n                id      : gif.id,\r\n                title   : gif.title,\r\n                url     : gif.images.fixed_height_small.url\r\n            }\r\n        } );\r\n        \r\n        console.log( data );\r\n\r\n\r\n       return gifs;\r\n    }","import React, { useState, useEffect } from 'react'\r\nimport { getGif } from '../helpers/getGifs.js';\r\n\r\nexport const GridGif = ( { category } ) => {\r\n\r\n    // se utiliza para no renderizar lo que este dentro en cada cambio del component\r\n    useEffect( () => getGif( category ).then( setImages ), [ ]);\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__fadeInDown\"> { category } </h2>\r\n            {/* gif Item */}\r\n            <div className=\"row\">\r\n                { images.map( ( { url, title, id } ) => {\r\n                    // const complete = url.current && url.current.complete;\r\n                    return <div key={ id } className=\"col-md-3 p-3 animate__animated animate__fadeInDown\">\r\n                                <div className=\" card-j bg-white rounded\">\r\n                                    {/* si la imagen no ha cargado */}\r\n                                    <img loading=\"lazy\" height=\"200px\" src={ url } className=\"card-img-top\" alt=\"...\" />\r\n                                    <div className=\"card-body\">\r\n                                        <h5 className=\"card-title text-gray\"> { title } </h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                } ) }\r\n            </div>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GridGif } from './components/GridGif';\r\n\r\nconst GifExpertApp = props => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2> Gif Expert App </h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n            { categories.map( ( category ) => (\r\n                <GridGif \r\n                    key={ category }\r\n                    category={ category }/>\r\n            ) ) }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './styles.css';\r\n\r\nconst gifAppContent = document.getElementById(\"gifApp\")\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n    gifAppContent\r\n)"],"sourceRoot":""}